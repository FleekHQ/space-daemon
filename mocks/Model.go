// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/FleekHQ/space-daemon/core/space/domain"
	mock "github.com/stretchr/testify/mock"

	model "github.com/FleekHQ/space-daemon/core/textile/model"
)

// Model is an autogenerated mock type for the Model type
type Model struct {
	mock.Mock
}

// BucketBackupToggle provides a mock function with given fields: ctx, bucketSlug, backup
func (_m *Model) BucketBackupToggle(ctx context.Context, bucketSlug string, backup bool) (*model.BucketSchema, error) {
	ret := _m.Called(ctx, bucketSlug, backup)

	var r0 *model.BucketSchema
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *model.BucketSchema); ok {
		r0 = rf(ctx, bucketSlug, backup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, bucketSlug, backup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucket provides a mock function with given fields: ctx, bucketSlug, dbID
func (_m *Model) CreateBucket(ctx context.Context, bucketSlug string, dbID string) (*model.BucketSchema, error) {
	ret := _m.Called(ctx, bucketSlug, dbID)

	var r0 *model.BucketSchema
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.BucketSchema); ok {
		r0 = rf(ctx, bucketSlug, dbID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketSlug, dbID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMirrorBucket provides a mock function with given fields: ctx, bucketSlug, mirrorBucket
func (_m *Model) CreateMirrorBucket(ctx context.Context, bucketSlug string, mirrorBucket *model.MirrorBucketSchema) (*model.BucketSchema, error) {
	ret := _m.Called(ctx, bucketSlug, mirrorBucket)

	var r0 *model.BucketSchema
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.MirrorBucketSchema) *model.BucketSchema); ok {
		r0 = rf(ctx, bucketSlug, mirrorBucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *model.MirrorBucketSchema) error); ok {
		r1 = rf(ctx, bucketSlug, mirrorBucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMirrorFile provides a mock function with given fields: ctx, mirrorFile
func (_m *Model) CreateMirrorFile(ctx context.Context, mirrorFile *domain.MirrorFile) (*model.MirrorFileSchema, error) {
	ret := _m.Called(ctx, mirrorFile)

	var r0 *model.MirrorFileSchema
	if rf, ok := ret.Get(0).(func(context.Context, *domain.MirrorFile) *model.MirrorFileSchema); ok {
		r0 = rf(ctx, mirrorFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MirrorFileSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.MirrorFile) error); ok {
		r1 = rf(ctx, mirrorFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReceivedFile provides a mock function with given fields: ctx, file, invitationId, accepted, key
func (_m *Model) CreateReceivedFile(ctx context.Context, file domain.FullPath, invitationId string, accepted bool, key []byte) (*model.ReceivedFileSchema, error) {
	ret := _m.Called(ctx, file, invitationId, accepted, key)

	var r0 *model.ReceivedFileSchema
	if rf, ok := ret.Get(0).(func(context.Context, domain.FullPath, string, bool, []byte) *model.ReceivedFileSchema); ok {
		r0 = rf(ctx, file, invitationId, accepted, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ReceivedFileSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.FullPath, string, bool, []byte) error); ok {
		r1 = rf(ctx, file, invitationId, accepted, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSharedPublicKey provides a mock function with given fields: ctx, pubKey
func (_m *Model) CreateSharedPublicKey(ctx context.Context, pubKey string) (*model.SharedPublicKeySchema, error) {
	ret := _m.Called(ctx, pubKey)

	var r0 *model.SharedPublicKeySchema
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.SharedPublicKeySchema); ok {
		r0 = rf(ctx, pubKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SharedPublicKeySchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pubKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBucket provides a mock function with given fields: ctx, bucketSlug
func (_m *Model) FindBucket(ctx context.Context, bucketSlug string) (*model.BucketSchema, error) {
	ret := _m.Called(ctx, bucketSlug)

	var r0 *model.BucketSchema
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.BucketSchema); ok {
		r0 = rf(ctx, bucketSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucketSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMirrorFileByPathAndBucketSlug provides a mock function with given fields: ctx, path, bucketSlug
func (_m *Model) FindMirrorFileByPathAndBucketSlug(ctx context.Context, path string, bucketSlug string) (*model.MirrorFileSchema, error) {
	ret := _m.Called(ctx, path, bucketSlug)

	var r0 *model.MirrorFileSchema
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.MirrorFileSchema); ok {
		r0 = rf(ctx, path, bucketSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MirrorFileSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, path, bucketSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReceivedFile provides a mock function with given fields: ctx, remoteDbID, bucket, path
func (_m *Model) FindReceivedFile(ctx context.Context, remoteDbID string, bucket string, path string) (*model.ReceivedFileSchema, error) {
	ret := _m.Called(ctx, remoteDbID, bucket, path)

	var r0 *model.ReceivedFileSchema
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.ReceivedFileSchema); ok {
		r0 = rf(ctx, remoteDbID, bucket, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ReceivedFileSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, remoteDbID, bucket, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuckets provides a mock function with given fields: ctx
func (_m *Model) ListBuckets(ctx context.Context) ([]*model.BucketSchema, error) {
	ret := _m.Called(ctx)

	var r0 []*model.BucketSchema
	if rf, ok := ret.Get(0).(func(context.Context) []*model.BucketSchema); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.BucketSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceivedFiles provides a mock function with given fields: ctx, accepted, seek, limit
func (_m *Model) ListReceivedFiles(ctx context.Context, accepted bool, seek string, limit int) ([]*model.ReceivedFileSchema, error) {
	ret := _m.Called(ctx, accepted, seek, limit)

	var r0 []*model.ReceivedFileSchema
	if rf, ok := ret.Get(0).(func(context.Context, bool, string, int) []*model.ReceivedFileSchema); ok {
		r0 = rf(ctx, accepted, seek, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ReceivedFileSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, string, int) error); ok {
		r1 = rf(ctx, accepted, seek, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSharedPublicKeys provides a mock function with given fields: ctx
func (_m *Model) ListSharedPublicKeys(ctx context.Context) ([]*model.SharedPublicKeySchema, error) {
	ret := _m.Called(ctx)

	var r0 []*model.SharedPublicKeySchema
	if rf, ok := ret.Get(0).(func(context.Context) []*model.SharedPublicKeySchema); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SharedPublicKeySchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertBucket provides a mock function with given fields: ctx, bucketSlug, dbID
func (_m *Model) UpsertBucket(ctx context.Context, bucketSlug string, dbID string) (*model.BucketSchema, error) {
	ret := _m.Called(ctx, bucketSlug, dbID)

	var r0 *model.BucketSchema
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.BucketSchema); ok {
		r0 = rf(ctx, bucketSlug, dbID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketSlug, dbID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
