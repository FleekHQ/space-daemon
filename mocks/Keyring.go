// Code generated by mockery v2.0.0. DO NOT EDIT.

package mocks

import (
	keyring "github.com/99designs/keyring"
	mock "github.com/stretchr/testify/mock"
)

// Keyring is an autogenerated mock type for the Keyring type
type Keyring struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *Keyring) Get(_a0 string) (keyring.Item, error) {
	ret := _m.Called(_a0)

	var r0 keyring.Item
	if rf, ok := ret.Get(0).(func(string) keyring.Item); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(keyring.Item)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadata provides a mock function with given fields: _a0
func (_m *Keyring) GetMetadata(_a0 string) (keyring.Metadata, error) {
	ret := _m.Called(_a0)

	var r0 keyring.Metadata
	if rf, ok := ret.Get(0).(func(string) keyring.Metadata); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(keyring.Metadata)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: _a0
func (_m *Keyring) Set(_a0 keyring.Item) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(keyring.Item) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
