syntax = "proto3";


import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

package space;

option go_package = ".;pb";

//See here for more info about the google.api.http spec: https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46

// SpaceApi service
service SpaceApi {
  // Get all folder or files in the default bucket. It fetches all subdirectories too.
  rpc ListDirectories(ListDirectoriesRequest) returns (ListDirectoriesResponse) {
    option (google.api.http) = {
      get: "/v1/directories/all"
    };
  }

  // Get the folder or files in the path directory.
  // Unlike ListDirectories, this only returns immediate children at path.
  rpc ListDirectory(ListDirectoryRequest) returns (ListDirectoryResponse) {
    option (google.api.http) = {
      get: "/v1/directories"
    };
  }

  // Generate Key Pair for current account.
  // This will return error if daemon account already has keypairs
  rpc GenerateKeyPair(GenerateKeyPairRequest) returns (GenerateKeyPairResponse) {
    option (google.api.http) = {
      post: "/v1/keypairs/generate"
      body: "*"
    };
  }

  rpc GetStoredMnemonic(GetStoredMnemonicRequest) returns (GetStoredMnemonicResponse) {
    option (google.api.http) = {
      get: "/v1/keypairs/mnemonic"
    };
  }

  // Restores a keypair given a mnemonic.
  // This will override any existing key pair
  rpc RestoreKeyPairViaMnemonic(RestoreKeyPairViaMnemonicRequest) returns (RestoreKeyPairViaMnemonicResponse) {
    option (google.api.http) = {
      post: "/v1/keypairs/restoreWithMnemonic"
      body: "*"
    };
  }

  rpc DeleteKeyPair(DeleteKeyPairRequest) returns (DeleteKeyPairResponse) {
    option (google.api.http) = {
      post: "/v1/keypairs/delete"
      body: "*"
    };
  }

  // Force Generation of KeyPair. This will override existing keys stored in daemon.
  rpc GenerateKeyPairWithForce(GenerateKeyPairRequest) returns (GenerateKeyPairResponse) {
    option (google.api.http) = {
      post: "/v1/keypairs/forceGenerate"
      body: "*"
    };
  }

  rpc GetPublicKey(GetPublicKeyRequest) returns (GetPublicKeyResponse) {
    option (google.api.http) = {
      post: "/v1/publicKey"
      body: "*"
    };
  }

  // Subscribe to file events. This streams responses to the caller
  rpc Subscribe(google.protobuf.Empty) returns (stream FileEventResponse) {
    option (google.api.http) = {
      get: "/v1/subscriptions/file"
    };
  }

  // Subscribe to file info events. This streams responses to the caller
  rpc FileInfoSubscribe(google.protobuf.Empty) returns (stream FileInfoEventResponse) {
    option (google.api.http) = {
      get: "/v1/subscriptions/fileinfo"
    };
  }

  // Subscribe to textile events. This streams responses to the caller
  rpc TxlSubscribe(google.protobuf.Empty) returns (stream TextileEventResponse) {
    option (google.api.http) = {
      get: "/v1/subscriptions/textile"
    };
  }

  // Open a file in the daemon.
  // Daemon keeps track of all open files and closes them if no activity is noticed after a while
  rpc OpenFile(OpenFileRequest) returns (OpenFileResponse) {
    option (google.api.http) = {
      post: "/v1/files/open"
      body: "*"
    };
  }

  // Generates a copy of the file that's accessible through IPFS gateways
  rpc GeneratePublicFileLink(GeneratePublicFileLinkRequest) returns (GeneratePublicFileLinkResponse) {
    option (google.api.http) = {
      post: "/v1/buckets/{bucket}/generatePublicFileLink"
      body: "*"
    };
  }

  // Gets the files that are shared with this recipient
  rpc GetSharedWithMeFiles(GetSharedWithMeFilesRequest) returns (GetSharedWithMeFilesResponse) {
    option (google.api.http) = {
      get: "/v1/files/sharedWithMe"
    };
  }

  // Open an encrypted public shared file in the daemon.
  // This requires the decryption key and file hash/cid to work
  rpc OpenPublicFile(OpenPublicFileRequest) returns (OpenPublicFileResponse) {
    option (google.api.http) = {
      get: "/v1/files/openPublic"
    };
  }

  // Adds items (files/folders) to be uploaded to the bucket.
  rpc AddItems(AddItemsRequest) returns (stream AddItemsResponse) {
    option (google.api.http) = {
      post: "/v1/files"
      body: "*"
    };
  }

  // Creates a folder/directory at the specified path
  rpc CreateFolder(CreateFolderRequest) returns (CreateFolderResponse) {
    option (google.api.http) = {
      post: "/v1/directories"
      body: "*"
    };
  }

  // Toggle FUSE drive to be mounted or unmounted
  rpc ToggleFuseDrive(ToggleFuseRequest) returns (FuseDriveResponse) {
    option (google.api.http) = {
      post: "/v1/fuse"
      body: "*"
    };
  }

  // Get status of FUSE drive. If mounted or unmounted
  rpc GetFuseDriveStatus(google.protobuf.Empty) returns (FuseDriveResponse) {
    option (google.api.http) = {
      get: "/v1/fuse"
    };
  }

  // Create a new bucket owned by current user (aka keypair)
  rpc CreateBucket(CreateBucketRequest) returns (CreateBucketResponse) {
    option (google.api.http) = {
      post: "/v1/buckets"
      body: "*"
    };
  }

  // Backup Key by Passphrase
  rpc BackupKeysByPassphrase(BackupKeysByPassphraseRequest) returns (BackupKeysByPassphraseResponse) {
    option (google.api.http) = {
      post: "/v1/passphrases/backup"
      body: "*"
    };
  }

  // Recover Keys by Passphrase
  rpc RecoverKeysByPassphrase(RecoverKeysByPassphraseRequest) returns (RecoverKeysByPassphraseResponse) {
    option (google.api.http) = {
      post: "/v1/passphrases/recover"
      body: "*"
    };
  }

  rpc CreateLocalKeysBackup(CreateLocalKeysBackupRequest) returns (CreateLocalKeysBackupResponse) {
    option (google.api.http) = {
      post: "/v1/localBackups/backup"
      body: "*"
    };
  }

  rpc RecoverKeysByLocalBackup(RecoverKeysByLocalBackupRequest) returns (RecoverKeysByLocalBackupResponse) {
    option (google.api.http) = {
      post: "/v1/localBackups/recover"
      body: "*"
    };
  }

  // Share bucket
  rpc ShareBucket(ShareBucketRequest) returns (ShareBucketResponse) {
    option (google.api.http) = {
      post: "/v1/buckets/{bucket}/share"
      body: "*"
    };
  }

  // Join bucket
  rpc JoinBucket(JoinBucketRequest) returns (JoinBucketResponse) {
    option (google.api.http) = {
      post: "/v1/buckets/{bucket}/join"
      body: "*"
    };
  }

  // Share bucket via public key using Textile Hub inboxing
  rpc ShareFilesViaPublicKey(ShareFilesViaPublicKeyRequest) returns (ShareFilesViaPublicKeyResponse) {
    option (google.api.http) = {
      post: "/v1/buckets/{bucket}/shareFilesViaPublicKey"
      body: "*"
    };
  }

  rpc AcceptBucketInvitation(AcceptBucketInvitationRequest) returns (AcceptBucketInvitationResponse) {
    option (google.api.http) = {
      post: "/v1/acceptInvitation"
      body: "*"
    };
  }

  rpc RejectBucketInvitation(RejectBucketInvitationRequest) returns (RejectBucketInvitationResponse) {
    option (google.api.http) = {
      post: "/v1/rejectInvitation"
      body: "*"
    };
  }

  rpc NotificationSubscribe(google.protobuf.Empty) returns (stream NotificationEventResponse) {
    option (google.api.http) = {
      get: "/v1/subscriptions/notification"
    };
  }

  rpc ListBuckets(ListBucketsRequest) returns (ListBucketsResponse) {
    option (google.api.http) = {
      get: "/v1/buckets"
    };
  }

  rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse) {
    option (google.api.http) = {
      get: "/v1/notifications"
    };
  }


  rpc ReadNotification(ReadNotificationRequest) returns (ReadNotificationResponse) {
    option (google.api.http) = {
      post: "/v1/notifications/{ID}/read"
      body: "*"
    };
  }

  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
    option (google.api.http) = {
      post: "/v1/deleteAccount"
      body: "*"
    };
  }

  rpc ToggleBucketBackup(ToggleBucketBackupRequest) returns (ToggleBucketBackupResponse) {
    option (google.api.http) = {
      post: "/v1/backup"
      body: "*"
    };
  }

  rpc GetUsageInfo(GetUsageInfoRequest) returns (GetUsageInfoResponse) {
    option (google.api.http) = {
      get: "/v1/usage"
    };
  }
}

message GetSharedWithMeFilesRequest {
  string seek = 1;
  int64 limit = 2;
}

message GetSharedWithMeFilesResponse {
  repeated ListDirectoryEntry items = 1;
  int64 nextOffset = 2;
}

message GetUsageInfoRequest {}

message GetUsageInfoResponse {
  uint64 localStarogeUsed = 1;
  uint64 localBandwidthUsed = 2;
  uint64 spaceStorageUsed = 3;
  uint64 spaceBandwidthUsed = 4;
  uint64 usageQuota = 5;
}

message ToggleBucketBackupRequest {
  string bucket = 1;
  bool backup = 2;
}

message ToggleBucketBackupResponse {}

message ListDirectoriesRequest {
  string bucket = 1;
}

message FileMember {
  string publicKey = 1;
}

message ListDirectoryEntry {
  string path = 1;
  bool isDir = 2;
  string name = 3;
  string sizeInBytes = 4;
  string created = 5;
  string updated = 6;
  string fileExtension = 7;
  string ipfsHash = 8;
  bool isLocallyAvailable = 9;
  int64 backupCount = 10;
  repeated FileMember members = 11;
}

message ListDirectoriesResponse {
  repeated ListDirectoryEntry entries = 1;
}

message ListDirectoryRequest {
  string path = 1;
  string bucket = 2;
}

message ListDirectoryResponse {
  repeated ListDirectoryEntry entries = 1;
}

message CreateBucketRequest {
  string slug = 1;
}

message BucketMember {
  string address = 1;
  string publicKey = 2;
  bool isOwner = 3;
  bool hasJoined = 4;
}

message Bucket {
  string key = 1;
  string name = 2;
  string path = 3;
  int64 createdAt = 4;
  int64 updatedAt = 5;
  repeated BucketMember members = 6;
  bool isPersonalBucket = 7;
  bool isBackupEnabled = 8;
}

message CreateBucketResponse {
  Bucket bucket = 1;
}

message GenerateKeyPairRequest {}

message GenerateKeyPairResponse {
  string mnemonic = 1;
}

message GetStoredMnemonicRequest {}

message GetStoredMnemonicResponse {
  string mnemonic = 1;
}

message RestoreKeyPairViaMnemonicRequest {
  string mnemonic = 1;
}

message RestoreKeyPairViaMnemonicResponse {}

enum EventType {
  ENTRY_ADDED = 0;
  ENTRY_DELETED = 1;
  ENTRY_UPDATED = 2;
}

message FileEventResponse {
  EventType type = 1;
  ListDirectoryEntry entry = 2;
}

message FileInfoEventResponse {
  ListDirectoryEntry file = 1;
}

message TextileEventResponse {
  string bucket = 1;
}

message OpenFileRequest {
  string path = 1;
  string bucket = 2;
}

message OpenFileResponse {
  string location = 1;
}

message OpenPublicFileRequest {
  string fileCid = 1;
  string fileKey = 2;
  string filename = 3;
}

message OpenPublicFileResponse {
  string location = 1;
}

message AddItemsRequest {
  // full paths to file or Folder on FS. Needs to be a location available to the daemon
  repeated string sourcePaths = 1;
  // target path in bucket.
  string targetPath = 2;
  // The bucket in which to save the item
  string bucket = 3;
}

message AddItemResult {
  string sourcePath= 1;
  string bucketPath = 2;
  string error = 3;
}

message AddItemsResponse {
  AddItemResult result = 1;
  int64 totalFiles = 2;
  int64 totalBytes = 3;
  int64 completedFiles = 4;
  int64 completedBytes = 5;
}

message CreateFolderRequest {
  // target path in bucket to add new empty folder
  string path = 1;
  // The bucket in which to add the folder
  string bucket = 2;
}
// not sure we need to return anything other than an error if we failed
message CreateFolderResponse {
}

message BackupKeysByPassphraseRequest {
  string passphrase = 1;
}

message BackupKeysByPassphraseResponse {}

message RecoverKeysByPassphraseRequest {
  string passphrase = 1;
}

message RecoverKeysByPassphraseResponse {}

message ThreadInfo {
  repeated string addresses = 1;
  string key = 2;
}

message ShareBucketRequest {
  string bucket = 1;
}

message ShareBucketResponse {
  ThreadInfo threadinfo = 1;
}

message JoinBucketRequest {
  ThreadInfo threadinfo = 1;
  string bucket = 2;
}

message JoinBucketResponse {
  bool result = 1;
}


message ShareFilesViaPublicKeyRequest {
  repeated string publicKeys = 1;
  string bucket = 2;
  repeated string paths = 3;
}

message ShareFilesViaPublicKeyResponse {}

message GeneratePublicFileLinkRequest {
  string bucket = 1;
  repeated string itemPaths = 2;
  string password = 3;
}

message GeneratePublicFileLinkResponse {
  string link = 1;
  string fileCid = 2;
}

message ToggleFuseRequest {
  bool mountDrive = 1;
}

message FuseDriveResponse {
  bool fuseDriveMounted = 1;
}

message ListBucketsRequest {}

message ListBucketsResponse {
  repeated Bucket buckets = 1;
}

enum NotificationType {
  INVITATION = 0;
  USAGEALERT = 1;
}

enum InvitationStatus {
  PENDING = 0;
  ACCEPTED = 1;
  REJECTED = 2;
}

message Invitation {
  string inviterPublicKey = 1;
  string invitationID = 2;
  InvitationStatus status = 4;
  repeated string itemPaths = 5;
}

message UsageAlert {
  int64 used = 1;
  int64 limit = 2;
  string message = 3;
}

message Notification {
  string ID = 1; // underlying message id from textile
  string subject = 2;
  string body = 3;
  oneof relatedObject {
    Invitation invitationValue = 4;
    UsageAlert usageAlert = 5;
  }
  NotificationType type = 6;
  int64 createdAt = 7;
  int64 readAt = 8;
}

message AcceptBucketInvitationRequest {
  string invitationID = 1;
}

message AcceptBucketInvitationResponse {}

message RejectBucketInvitationRequest {
  string invitationID = 1;
}

message RejectBucketInvitationResponse {}

message NotificationEventResponse {
  Notification notification = 1;
}

message GetNotificationsRequest {
  string seek = 1;
  int64 limit = 2;
}

message GetNotificationsResponse {
  repeated Notification notifications= 1;
  int64 nextOffset = 2;
}
message ReadNotificationRequest {
  string ID = 1;
}

message ReadNotificationResponse {
}

message GetPublicKeyRequest {}

message GetPublicKeyResponse {
  // Public key encoded in hex
  string publicKey = 1;
  // Used to verify that the user has access to the private key
  string hubAuthToken = 2;
}

message RecoverKeysByLocalBackupRequest {
  string pathToKeyBackup = 1;
}

message RecoverKeysByLocalBackupResponse {}

message CreateLocalKeysBackupRequest {
  // The path in which to save the backup
  string pathToKeyBackup = 1;
}

message CreateLocalKeysBackupResponse {}

message DeleteAccountRequest {}

message DeleteAccountResponse {}

message DeleteKeyPairRequest {}

message DeleteKeyPairResponse {}
